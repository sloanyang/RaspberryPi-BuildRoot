PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC=bluetooth

DAEMON=/usr/sbin/bluetoothd
HCIATTACH=/usr/sbin/hciattach

HID2HCI=/usr/sbin/hid2hci
HID2HCI_ENABLED=0
HID2HCI_UNDO=1

UART_CONF=/etc/bluetooth/uart

RFCOMM=/usr/bin/rfcomm
RFCOMM_NAME=rfcomm
RFCOMM_CONF=/etc/bluetooth/rfcomm.conf
SDPTOOL=/usr/bin/sdptool

SSD_OPTIONS="--oknodo --quiet --exec $DAEMON"

set -e

run_sdptool()
{
    test -x $SDPTOOL || return 1

    if ! test -z "$SDPTOOL_OPTIONS" ; then
        oldifs="$IFS"
        IFS=";"
        for o in $SDPTOOL_OPTIONS ; do
            #echo "execing $SDPTOOL $o"
            IFS=" "
            if [ "$VERBOSE" != "no" ]; then
                $SDPTOOL $o
            else
                $SDPTOOL $o >/dev/null 2>&1
            fi
        done
        IFS="$oldifs"
    fi

}

enable_hci_input()
{
    echo "switching to HID/HCI no longer done in init script, see /usr/share/doc/bluez/NEWS.Debian.gz"
}

disable_hci_input()
{
    echo "switching to HID/HCI no longer done in init script, see /usr/share/doc/bluez/NEWS.Debian.gz"
}

start_uarts()
{
    [ -f $HCIATTACH ] && [ -f $UART_CONF ] || return
    grep -v '^#' $UART_CONF | while read i; do
               if [ "$VERBOSE" != no ]; then
                       $HCIATTACH $i
               else
                       $HCIATTACH $i >/dev/null 2>&1
               fi
    done
}

stop_uarts()
{
    killall hciattach > /dev/null 2>&1 || true
}

start_rfcomm()
{
    if [ -x $RFCOMM ] && [ -f $RFCOMM_CONF ] ; then
        # rfcomm must always succeed for now: users
        # may not yet have an rfcomm-enabled kernel
                if [ "$VERBOSE" != no ]; then
                       $RFCOMM -f $RFCOMM_CONF bind all || true
                else
                       $RFCOMM -f $RFCOMM_CONF bind all >/dev/null 2>&1 || true
                fi
    fi
}

stop_rfcomm()
{
    if [ -x $RFCOMM ] ; then
               if [ "$VERBOSE" != no ]; then
                       $RFCOMM unbind all || true
               else
                       $RFCOMM unbind all >/dev/null 2>&1 || true
               fi
    fi
}

restart_rfcomm()
{
    if [ -x $RFCOMM ] && [ -f $RFCOMM_CONF ] ; then
               if [ "$VERBOSE" != no ]; then
                       $RFCOMM unbind all || true
                       $RFCOMM -f $RFCOMM_CONF bind all || true
               else
                       $RFCOMM unbind all >/dev/null 2>&1|| true
                       $RFCOMM -f $RFCOMM_CONF bind all >/dev/null 2>&1 || true
               fi
    fi
}

case "$1" in
  start)
    echo "Starting $DESC"

    if test "$BLUETOOTH_ENABLED" = "0"; then
        echo "disabled. see /etc/default/bluetooth"
        exit 0
    fi

    start-stop-daemon --start $SSD_OPTIONS

    run_sdptool || true

    start_uarts || true

    if test "$HID2HCI_ENABLED" = "1"; then
        enable_hci_input || true
    fi
    start_rfcomm || true

    if test "$HIDD_ENABLED" = "1" ||
            test "$PAND_ENABLED" = "1" ||
            test "$DUND_ENABLED" = "1"; then
        echo "compatibily daemons not started, see bluez-compat package"
    fi

  ;;
  stop)
    echo "Stopping $DESC"
    if test "$BLUETOOTH_ENABLED" = "0"; then
        exit 0
    fi
    stop_rfcomm || true
    if test "$HID2HCI_UNDO" = "1"; then
        disable_hci_input || true
    fi
    start-stop-daemon --stop $SSD_OPTIONS
    stop_uarts || true
  ;;
  restart|force-reload)
    $0 stop
    sleep 1
    $0 start
  ;;
  status)
    status_of_proc "$DAEMON" "$DESC" && exit 0 || exit $?
  ;;
  *)
    N=/etc/init.d/S32bluetooth
    # echo "Usage: $N {start|stop|restart|reload|force-reload|status}" >&2
    echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
    exit 1
    ;;
esac

exit 0
